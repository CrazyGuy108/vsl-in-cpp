#ifndef DIAG
#define DIAG(kind, params, values)
#endif

// driver
DIAG(NO_INPUT, (int=0), (FATAL, "no input files"))
DIAG(CANT_OPEN_FILE, (const char* file, std::string message), (FATAL,
        "could not open file '", file, "': ", message))

// lexer
DIAG(UNKNOWN_SYMBOL, (Location l, char c), (WARNING, l, "unknown symbol '", c,
        '\''))

// parser
DIAG(EXPECTED_BUT_FOUND, (const char* s, const Token& found), (ERROR,
        found.getLoc(), "expected ", s, " but found ", found.getKindName()))
DIAG(UNEXPECTED_TOKEN, (const Token& t), (ERROR, t.getLoc(),
        "unexpected token '", t.getText(), '\''))
DIAG(INVALID_PARAM_TYPE, (const ParamNode& param), (ERROR, param.getLoc(),
        " type '", *param.getType(), "' is invalid for parameter '",
        param.getName(), '\''))
DIAG(INVALID_INT, (const Token& t), (ERROR, t.getLoc(), "invalid integer '",
        t.getText(), '\''))
DIAG(OVERFLOW_DETECTED, (const Token& t), (WARNING, t.getLoc(),
        "overflow detected in integer '", t.getText(), '\''))

// funcResolver
DIAG(FUNC_ALREADY_DEFINED, (FuncInterfaceNode& func), (ERROR, func.getLoc(),
        "function '", func.getName(), "' was already defined"))

// irEmitter
DIAG(TOPLEVEL_CTRL_FLOW, (Location l), (ERROR, l,
        "top level control flow statements are not allowed"))
DIAG(CANNOT_CONVERT, (const ExprNode& from, const Type& to), (ERROR,
        from.getLoc(), "cannot convert expression of type '", *from.getType(),
        "' to type '", to, '\''))
DIAG(INVALID_VAR_TYPE, (const VariableNode& var), (ERROR, var.getLoc(),
        "type '", *var.getType(), "' is invalid for variable '", var.getName(),
        '\''))
DIAG(MISMATCHING_VAR_TYPES, (const VariableNode& var), (ERROR,
        var.getInit()->getLoc(), "variable '", var.getName(), "' is of type '",
        *var.getType(),
        "' but is being initialized with an expression of type '",
        *var.getInit()->getType(), '\''))
DIAG(VAR_ALREADY_DEFINED, (const VariableNode& var), (ERROR, var.getLoc(),
        "variable '", var.getName(), "' was already defined in this scope"))
DIAG(FUNCEPTION, (const FuncInterfaceNode& func), (ERROR, func.getLoc(),
        "function '", func.getName(),
        "' is being defined within another function scope"))
DIAG(MISSING_RETURN, (const FunctionNode& func), (WARNING, func.getLoc(),
        "missing return statement at the end of function '",
        func.getName(), '\''))
DIAG(CANT_RETURN_VOID_VALUE, (ReturnNode& ret), (ERROR,
        ret.getValue()->getLoc(), "cannot return a value of type Void"))
DIAG(RETVAL_MISMATCHES_RETTYPE, (const ExprNode& retVal, const Type& retType),
    (ERROR, retVal.getLoc(), "return value of type '",
        *retVal.getType(), "' does not match return type '", retType, '\''))
DIAG(UNKNOWN_IDENT, (IdentNode& id), (ERROR, id.getLoc(),
        "unknown identifier '", id.getName(), '\''))
DIAG(INVALID_INT_WIDTH, (LiteralNode& literal), (INTERNAL, literal.getLoc(),
        "VSL does not support ", literal.getValue().getBitWidth(),
        "-bit integers"))
DIAG(INVALID_UNARY, (UnaryNode& unary), (ERROR, unary.getLoc(),
        "cannot apply unary operator '", tokenKindName(unary.getOp()),
        "' to type '", *unary.getExpr()->getType(), '\''))
DIAG(INVALID_BINARY, (BinaryNode& binary), (ERROR, binary.getLoc(),
        "cannot apply binary operator '", tokenKindName(binary.getOp()),
        "' to types '", *binary.getLhs()->getType(), "' and '",
        *binary.getRhs()->getType(), '\''))
DIAG(TERNARY_TYPE_MISMATCH, (TernaryNode& ternary), (ERROR, ternary.getLoc(),
        "ternary operands of type '", *ternary.getThen()->getType(), "' and '",
        *ternary.getElse()->getType(), "' don't match"))
DIAG(NOT_A_FUNCTION, (const ExprNode& callee), (ERROR, callee.getLoc(),
        "called object of type '", *callee.getType(), "' is not a function"))
DIAG(MISMATCHING_ARG_COUNT, (Location l, size_t args, size_t params), (ERROR, l,
        "mismatched number of arguments ", args, " versus parameters ", params))
DIAG(LHS_NOT_ASSIGNABLE, (ExprNode& lhs), (ERROR, lhs.getLoc(),
        "lhs must be an identifier"))

// irgen
DIAG(LLVM_MODULE_ERROR, (std::string s), (INTERNAL,
        "LLVM encountered the below errors:\n", std::move(s)))

// codegen
DIAG(CANT_FIND_TARGET, (std::string error), (FATAL,
        "could not find requested target: ", std::move(error)))
DIAG(TARGET_CANT_EMIT_OBJ, (int=0), (FATAL,
        "target machine cannot emit a file of type object"))

#undef DIAG
